<?xml version="1.0" encoding="utf-8"?>
<odoo>

    <record id="x_mjb_planning_sheet_compute" model="ir.actions.server">
        <field name="name">MJB Planning - Compute</field>
        <field name="model_id" ref="x_mjb_planning_sheet.model_x_mjb_planning_sheet"/>
        <field name="binding_model_id" ref="x_mjb_planning_sheet.model_x_mjb_planning_sheet"/>
        <field name="state">code</field>
        <field name="code">
# Compute all needs for the calculator selection
# record = env['x_mjb_mrp_planner_sheet'].browse(11)
def getProductReservedQty(productId=False, locationId=False):
    if not productId or not locationId:
        return 0.0
    res = {}
    domain_quant = [
        ("product_id", "=", productId),
        ('location_id', "=", locationId)
    ]
    quants = (
        env["stock.quant"]
        .with_context(lang=False)
        .read_group(
            domain_quant,
            ["product_id", "location_id", "quantity", "reserved_quantity"],
            ["product_id", "location_id"],
            lazy=False,
        )
    )
    qty = 0.0
    for quant in quants:
        qty += quant["reserved_quantity"]
    return qty

def getProductForecastedQty(productId=False, locationId=False):
    return 0.0

def calculateNeed(calculator):
    validate(calculator)
    company = env.company
    if calculator['x_company_id']:
        company = calculator['x_company_id']

    # companyCurrency = company.currency_id

    STK_LOC_ID = getOption('STOCK_LOC_ID', company)
    try:
        STK_LOC_ID = int(STK_LOC_ID)
    except:
        alert("STK_LOC_ID option is not a integer ! Please set the value to the stock location ID used to compare stock")

    # log(" ")
    # log("---")
    # log("RECURSIVE")
    # log("---")
    # log(" ")

    finalProductList = record.x_output_line_ids
    finalNeeds = []
    finalErrors = []
    for line in finalProductList:
        product = line.x_product_id
        qty = line.x_quantity
        orderLineId = line.x_sale_order_line_id.id or False

        validateLine(line)
        needs, errors = getProductNeed(product, qty, line, len(finalNeeds))
        finalNeeds += needs
        finalErrors += errors
    # alert(str(finalNeeds))

    if len(finalErrors) > 0:
        alert("\n".join(finalErrors))

    # return False
    # log(" ")
    # log("---")
    # log("GROUPING")
    # log("---")
    # log(" ")
    # organize and group by

    sortedNeeds = {}
    for need in finalNeeds:
        key = str(need['product']['id'])

        if key not in sortedNeeds:
            onHandQty = need['product'].with_context(
                {'location': STK_LOC_ID})['qty_available']
            reservedQty = getProductReservedQty(need['product'].id, STK_LOC_ID)
            availableQty = onHandQty - reservedQty
            forecastedQty = getProductForecastedQty(
                need['product'].id, STK_LOC_ID)

            sortedNeeds[key] = {
                'x_sheet_id': calculator.id,
                "x_product_id": need['product']['id'],
                # 'x_standard_cost': need['product']['standard_price'],
                "x_computed_quantity": 0.0,
                "x_quantity": 0.0,
                "x_name": "",
                "x_bom_id": False,
                "x_origin_line_ids": [],
                "x_onhand_quantity": onHandQty,
                "x_reserved_quantity": reservedQty,
                "x_available_quantity": availableQty,
                "x_forecasted_quantity": forecastedQty,
                "x_supplier_id": False,
                'x_unit_price': need['product']['standard_price'],
                "x_type": need['type']
            }

            if need['type'] == 'normal':
                # sortedNeeds[key]['x_name'] = str(need['bom']['id'])
                sortedNeeds[key]['x_bom_id'] = need['bom']['id']
                sortedNeeds[key]['x_type'] = 'manufacture'
                sortedNeeds[key]['x_uom_id'] = need['bom']['product_uom_id']['id']

            if need['type'] == 'phantom':
                # sortedNeeds[key]['x_name'] = str(need['bom']['id'])
                sortedNeeds[key]['x_bom_id'] = need['bom']['id']
                sortedNeeds[key]['x_uom_id'] = need['bom']['product_uom_id']['id']

            if need['type'] == 'subcontract':
                # sortedNeeds[key]['x_name'] = str(need['bom']['id'])
                sortedNeeds[key]['x_bom_id'] = need['bom']['id']
                sortedNeeds[key]['x_uom_id'] = need['product']['uom_po_id']['id']

                if len(need['bom']['subcontractor_ids']) > 0:
                    sortedNeeds[key]['x_supplier_id'] = need['bom']['subcontractor_ids'][0]['id']

                    if len(need['product']['seller_ids']) > 0:
                        for price in need['product']['seller_ids']:
                            if price['partner_id']['id'] == need['bom']['subcontractor_ids'][0]['id']:
                                sortedNeeds[key]['x_unit_price'] = price['price']
                                sortedNeeds[key]['x_currency_id'] = price['currency_id']['id']

            if need['type'] == 'buy':
                if len(need['product']['seller_ids']) > 0:
                    sortedNeeds[key]['x_supplier_id'] = need['product']['seller_ids'][0]['partner_id']['id']
                    sortedNeeds[key]['x_unit_price'] = need['product']['seller_ids'][0]['price']
                    sortedNeeds[key]['x_currency_id'] = need['product']['seller_ids'][0]['currency_id']['id']
                sortedNeeds[key]['x_uom_id'] = need['product']['uom_po_id']['id']

        sortedNeeds[key]['x_computed_quantity'] = sortedNeeds[key]['x_computed_quantity'] + need['quantity']
        sortedNeeds[key]['x_quantity'] = sortedNeeds[key]['x_quantity'] + need['quantity']

        parentNeed = findParentNeed(need['parentUID'], finalNeeds)
        rootNeed = findParentNeed(need['rootUID'], finalNeeds)
        if parentNeed:
            # log("Root: %s | Parent: %s | Me: %s | %s" % (str(need['rootUID']),str(need['parentUID']),str(need['UID']),str(parentNeed['product'].name)))
            # alert(str(rootNeed))

            saleOrderLineId = rootNeed['line'].x_sale_order_line_id.id or False
            bomId = False
            if parentNeed['bom']:
                bomId = parentNeed['bom']['id']
            # alert("Parent "+ str(n))
            sortedNeeds[key]['x_origin_line_ids'].append((0, 0, {
                'x_sheet_id': calculator.id,
                "x_product_id": parentNeed['product']['id'],
                "x_uom_id": parentNeed['product']['uom_id']['id'],
                # 'x_standard_cost': parentNeed['product']['standard_price'],
                "x_computed_quantity": need['quantity'],
                "x_quantity": need['quantity'],
                'x_sale_order_line_id': saleOrderLineId,
                "x_name": "",
                "x_bom_id": bomId,
                "x_origin_line_ids": [],
                "x_onhand_quantity": 0,
                "x_reserved_quantity": 0,
                "x_forecasted_quantity": 0,
                'x_unit_price': 0.0,
                "x_type": 'origin'
            }))
        else:
            sortedNeeds[key]['x_sale_order_line_id'] = rootNeed['line'].x_sale_order_line_id.id or False

    calculator.x_buy_line_ids.unlink()
    calculator.x_subcontract_line_ids.unlink()
    calculator.x_manufacture_line_ids.unlink()
    calculator.x_kit_line_ids.unlink()

    res = []
    for key in sortedNeeds:
        env['x_mjb_planning_sheet_line'].create(sortedNeeds[key])

def findParentNeed(uid, needs):
    if uid >= 0:
        for n in needs:
            if n['UID'] == uid:
                return n
    return False

# Make sure the calculator is OK

def validate(calculator):
    problems = []
    if not calculator:
        alert("No calculator provided")
    #   if calculator.x_studio_status == "confirm":
    #     alert("Calculator cannot be confirmed")
    return True
    # Make sure the need line is OK

def validateLine(needLine):
    problems = []
    if not needLine.x_product_id:
        alert("No product provided")
    return True

# Select Bom by type preference

def chooseBom(product, bomOrder=['normal', 'subcontract', 'phantom']):
    boms = product.bom_ids
    if len(boms) == 0:
        return False

    for bomType in bomOrder:
        for bom in boms:
            if bom.type == bomType and len(bom.bom_line_ids) > 0:
                return bom

    alert("Error on product %s, no bom type on boms %s" % (product.display_name, str(boms.mapped('id'))))


# Compute needs for a product and given qty
def getProductNeed(product, quantity, line=False, collectionLength=0, parentUID=-1, rootUID=-1, depth=0, maxDepth=10):
    if depth > maxDepth:
        return [], ["Max Depth Reached"]

    bom = chooseBom(product)
    UID = collectionLength
    if parentUID == -1:
        rootUID = UID

    # log("Root: %s | Parent: %s | Me: %s | %s" % (str(rootUID),str(parentUID),str(UID),str(product.name)))

    # We are a component, just return ourselves
    if not bom:
        return [{
            "UID": UID,
            "product": product,
            "type": "buy",
            "line": line,
            "quantity": quantity,
            "bom": False,
            "parentUID": parentUID,
            "rootUID": rootUID,
            "depth": depth
        }], []

    # We have bom, first add ourselves to the list, then our sub products
    finalNeeds = []
    # if depth > 0:
    finalNeeds.append({
        "UID": UID,
        "product": product,
        "type": bom.type,
        "line": line,
        "quantity": quantity,
        "bom": bom,
        "parentUID": parentUID,
        "rootUID": rootUID,
        "depth": depth
    })
    finalErrors = []

    for line in bom.bom_line_ids:
        isActive = checkBomLineActive(line, product)
        if isActive:
            # factor = production.product_uom_id._compute_quantity(production.product_qty, production.bom_id.product_uom_id) / production.bom_id.product_qty
            componentUOM = line.product_id.uom_id
            bomLineUOM = line.product_uom_id
            convertedQty = (quantity/bom.product_qty) * bomLineUOM._compute_quantity(line.product_qty, componentUOM)

            needs, errors = getProductNeed(
                line.product_id, convertedQty, False, collectionLength + len(finalNeeds), UID, rootUID, depth + 1)
            finalNeeds += needs
            finalErrors += errors

    # log(" ")
    return finalNeeds, finalErrors

# Check if our bom line is active
def checkBomLineActive(line, product):
    lineAttributeValues = line.bom_product_template_attribute_value_ids
    if len(lineAttributeValues) == 0:
        return True

    for attributeValue in lineAttributeValues:
        productAttributeValues = product.product_template_attribute_value_ids

        for productAttributeValue in productAttributeValues:
            sameType = productAttributeValue.attribute_id.name == attributeValue.attribute_id.name
            sameName = productAttributeValue.name == attributeValue.name
            if sameType and sameName:
                return True

    return False

def alert(m):
    raise(UserError(str(m)))

def getOption(code, company=False):
    domain = [
        ('x_code', '=', code)
    ]
    if company:
        domain.append(('x_company_id', '=', company.id))

    options = env['x_mjb_planning_sheet_opt'].search(domain, limit=1)
    if options:
        return options[0].x_name
    alert("%s is not set ! Please configure the options first !" % str(code))

if record:
    calculateNeed(record)
    record['x_computed_date'] = datetime.datetime.today()
    if not record['x_company_id']:
        record['x_company_id'] = env.company.id

        </field>
    </record>

    <record id="x_mjb_planning_wizard_exec" model="ir.actions.server">
        <field name="name">MJB Planning - Exec Wizard</field>
        <field name="model_id" ref="x_mjb_planning_sheet.model_x_mjb_planning_wizard"/>
        <field name="binding_model_id" ref="x_mjb_planning_sheet.model_x_mjb_planning_wizard"/>
        <field name="state">code</field>
        <field name="code">

def alert(m):
    raise(UserError(m))

def validate(wizard):
    if not wizard:
        alert("No wizard given")

    if not wizard.x_sheet_id:
        alert("No planning sheet given")

    if wizard.x_type not in ['add_product', 'add_order', 'buy', 'subcontract', 'manufacture']:
        alert("Wrong or not type provided")

    if wizard.x_type == 'add_order':
        if not wizard.x_sale_order_id:
            alert("No order provided")
        if len(wizard.x_sale_order_line_ids) == 0:
            alert("No order lines provided")

    if wizard.x_type == 'add_product':
        if len(wizard.x_product_ids) == 0:
            alert("No products provided")

    return True


def addOrderLines(wizard):
    data = {
        'x_output_line_ids': [],
        'x_sale_order_ids': []
    }
    data['x_sale_order_ids'].append((4, wizard.x_sale_order_id.id))

    for line in wizard.x_sale_order_line_ids:
        data['x_output_line_ids'].append((0, 0, {
            'x_product_id': line.product_id.id,
            'x_quantity': line.product_uom_qty,
            'x_unit_price': line.price_unit,
            'x_currency_id': line.currency_id.id,
            'x_sale_order_line_id': line.id,
            'x_type': 'output'
        }))
    wizard.x_sheet_id.write(data)


def addProductLines(wizard):
    data = {
        'x_output_line_ids': [],
    }
    for product in wizard.x_product_ids:
        data['x_output_line_ids'].append((0, 0, {
            'x_product_id': product.id,
            'x_quantity': 1,
            'x_type': 'output',
        }))
    wizard.x_sheet_id.write(data)


def validateForPO(wizard):
    problems = []
    lines = wizard.x_need_line_ids
    for l in lines:
        if not l.x_supplier_id:
            problems.append("Missing supplier for %s" %
                            str(l.x_product_id.name))
    if len(problems) > 0:
        alert("\n".join(problems))
    return True

def validateForMO(wizard):
    return True

def getOption(code, company=False):
    domain = [
        ('x_code', '=', code)
    ]
    if company:
        domain.append(('x_company_id', '=', company.id))

    options = env['x_mjb_planning_sheet_opt'].search(domain, limit=1)
    if options:
        return options[0].x_name
    alert("%s is not set ! Please configure the options first !" % str(code))


def createPOs(wizard, subcontracted=False):
    validateForPO(wizard)
    company = env.company
    if wizard['x_sheet_id']['x_company_id']:
        company = wizard['x_sheet_id']['x_company_id']
    lines = wizard.x_need_line_ids
    orders = {}
    title = 'Related Purchase Orders'
    if subcontracted:
        title = 'Related Subcontracted Orders'
        OPERATION_TYPE_ID = getOption('SUBCONTRACT_OPERATION_TYPE_ID', company)
        try:
            OPERATION_TYPE_ID = int(OPERATION_TYPE_ID)
        except:
            alert("SUBCONTRACT_OPERATION_TYPE_ID option is not a integer ! Please set the value to the buy operation type ID used to subcontract products")
    else:
        OPERATION_TYPE_ID = getOption('BUY_OPERATION_TYPE_ID', company)
        try:
            OPERATION_TYPE_ID = int(OPERATION_TYPE_ID)
        except:
            alert("BUY_OPERATION_TYPE_ID option is not a integer ! Please set the value to the buy operation type ID used to buy components")

    # for each need line
    for l in lines:
        supplier = l.x_supplier_id or False
        if str(supplier.id) not in orders:
            orders[str(supplier.id)] = {
                'origin': wizard.x_sheet_id.x_name,
                'x_sheet_id': wizard.x_sheet_id.id,
                'partner_id': supplier.id,
                'picking_type_id': OPERATION_TYPE_ID,
                'date_order':  datetime.datetime.today(),
                'order_line': []
            }

        orders[str(supplier.id)]['order_line'].append([0, 0, {
            'name': l.x_product_id.name,
            'product_id': l.x_product_id.id,
            'product_qty': l.x_quantity,
            'date_planned': datetime.datetime.now(),
            'x_sheet_id': wizard.x_sheet_id.id,
            'x_sheet_line_id': l.id,
            # 'sale_line_id': originLine.x_sale_order_line_id.id,
            'product_uom': l.x_product_id.uom_po_id.id,
            'price_unit': l.x_unit_price or 0.0
        }])

        # create one po line for each origin lines of our need
        # if len(l.x_origin_line_ids) > 0:
        #     sortedOrigins = {}

        #     for originLine in l.x_origin_line_ids:
        #         key = str(originLine.x_sale_order_line_id.id)
        #         if key not in sortedOrigins:
        #             sortedOrigins[key] = {
        #                 'name': "%s (%s - %s)" % (str(l.x_product_id.name), str(originLine.x_sale_order_line_id.order_id.name), str(originLine.x_sale_order_line_id.name)),
        #                 'product_id': l.x_product_id.id,
        #                 'product_qty': 0.0,
        #                 'x_sheet_id': wizard.x_sheet_id.id,
        #                 'x_sheet_line_id': l.id,
        #                 'sale_line_id': originLine.x_sale_order_line_id.id,
        #                 'date_planned': datetime.datetime.now(),
        #                 'product_uom': l.x_product_id.uom_po_id.id,
        #                 'price_unit': l.x_unit_price or 0.0
        #             }
        #         sortedOrigins[key]['product_qty'] = sortedOrigins[key]['product_qty'] + originLine.x_quantity
        #     for key in sortedOrigins:
        #         orders[str(supplier.id)]['order_line'].append(
        #             [0, 0, sortedOrigins[key]])
        # else:
        #     orders[str(supplier.id)]['order_line'].append([0, 0, {
        #         'name': l.x_product_id.name,
        #         'product_id': l.x_product_id.id,
        #         'product_qty': l.x_quantity,
        #         'date_planned': datetime.datetime.now(),
        #         'x_sheet_id': wizard.x_sheet_id.id,
        #         'x_sheet_line_id': l.id,
        #         # 'sale_line_id': originLine.x_sale_order_line_id.id,
        #         'product_uom': l.x_product_id.uom_po_id.id,
        #         'price_unit': l.x_unit_price or 0.0
        #     }])

    pos = []
    for k in orders:
        po = env['purchase.order'].sudo().create(orders[k])
        pos.append(po)

    return {
        'name': title,
        'view_mode': 'tree,form',
        'res_model': 'purchase.order',
        'type': 'ir.actions.act_window',
        'domain': [('x_sheet_id', '=', wizard.x_sheet_id.id)],
        'target': 'current',
        'nodestroy': True
    }

def createMOs(wizard):
    validateForMO(wizard)
    company = env.company
    if wizard['x_sheet_id']['x_company_id']:
        company = wizard['x_sheet_id']['x_company_id']
    lines = wizard.x_need_line_ids
    orders = []
    OPERATION_TYPE_ID = getOption('MFG_OPERATION_TYPE_ID', company)
    try:
        OPERATION_TYPE_ID = int(OPERATION_TYPE_ID)
    except:
        alert("MFG_OPERATION_TYPE_ID option is not a integer ! Please set the value to the buy operation type ID used to manufacture products")
    operationType = env['stock.picking.type'].browse(OPERATION_TYPE_ID)

    # for each need line
    for l in lines:
        bom = l.x_bom_id
        # branchId = False
        # routing = bom.routing_id
        # if routing:
        #     branch_id = routing.x_studio_branch_1.id

        # If we have 2 or more origins, it means we do not link to SO (shared component without color)
        # Else, we need to link to SO  and SO line
        salesOrderId = False
        salesOrderLineId = False
        if len(l.x_origin_line_ids) == 1:
            salesOrderLineId = l.x_origin_line_ids[0].x_sale_order_line_id.id
            salesOrderId = l.x_origin_line_ids[0].x_sale_order_line_id.order_id.id
        else:
            if l.x_sale_order_line_id:
                salesOrderLineId = l.x_sale_order_line_id.id
                salesOrderId = l.x_sale_order_line_id.order_id.id

        orders.append({
            'origin': wizard.x_sheet_id.x_name,
            'product_id': l.x_product_id.id,
            'bom_id': bom.id,
            # 'branch_id': branch_id,
            'product_qty': l.x_quantity,
            'product_uom_id': bom.product_uom_id.id,
            'picking_type_id': OPERATION_TYPE_ID,
            'location_src_id': operationType.default_location_src_id.id,
            'location_dest_id': operationType.default_location_dest_id.id,
            'x_sheet_id': wizard.x_sheet_id.id,
            'x_planner_sheet_line_id': l.id
            # 'x_sale_order_id': salesOrderId,
            # 'x_studio_sales_order_line_id': salesOrderLineId
            # 'date_order':  datetime.datetime.today()
        })
        # alert(str(orders))

    mos = []
    for order in orders:
        mo = env['mrp.production'].sudo().create(order)
        # mo._onchange_move_raw()
        mos.append(mo)

    return {
        'name': "Related Manufacturing Orders",
        'view_mode': 'tree,form',
        'res_model': 'mrp.production',
        'type': 'ir.actions.act_window',
        'domain': [('x_sheet_id', '=', wizard.x_sheet_id.id)],
        'target': 'current',
        'nodestroy': True
    }

def addToCalculator(wizard):
    validate(wizard)
    action = False

    if wizard.x_type == 'add_order':
        addOrderLines(wizard)

    if wizard.x_type == 'add_product':
        addProductLines(wizard)

    if wizard.x_type == 'buy':
        action = createPOs(wizard)

    if wizard.x_type == 'subcontract':
        action = createPOs(wizard, True)

    if wizard.x_type == 'manufacture':
        action = createMOs(wizard)

    return action

action = addToCalculator(record)
        </field>
    </record>

    <record id="x_mjb_planning_sheet_stage_action" model="ir.actions.server">
        <field name="name">MJB Planning - Stage</field>
        <field name="model_id" ref="x_mjb_planning_sheet.model_x_mjb_planning_sheet"/>
        <field name="binding_model_id" ref="x_mjb_planning_sheet.model_x_mjb_planning_sheet"/>
        <field name="state">code</field>
        <field name="code">
def alert(m):
    raise(UserError(str(m)))

def moveStage(sheet):
    stage = record.x_stage_id
    stageCode = 'new'
    if stage:
        stageCode = stage.x_code or 'new'

    if 'send_to' in env.context:
        stages = env['x_mjb_planning_sheet_stage'].search(
            [('x_code', '=', env.context['send_to'])])
        return {
            'x_stage_id': stages[0]['id']
        }
    if stageCode == 'new':
        stages = env['x_mjb_planning_sheet_stage'].search(
            [('x_code', '=', 'confirmed')])
        return {
            'x_stage_id': stages[0]['id']
        }
    if stageCode == 'confirmed':
        stages = env['x_mjb_planning_sheet_stage'].search(
            [('x_code', '=', 'closed')])
        return {
            'x_stage_id': stages[0]['id']
        }
    if stageCode == 'closed':
        stages = env['x_mjb_planning_sheet_stage'].search(
            [('x_code', '=', 'confirmed')])
        return {
            'x_stage_id': stages[0]['id']
        }
    return {}

if record:
    vals = moveStage(record)
    for k in vals:
        record[k] = vals[k]
        </field>
    </record>

    <record id="x_mjb_planning_wizard_action" model="ir.actions.server">
        <field name="name">MJB Planning - Wizard</field>
        <field name="model_id" ref="x_mjb_planning_sheet.model_x_mjb_planning_sheet"/>
        <field name="binding_model_id" ref="x_mjb_planning_sheet.model_x_mjb_planning_sheet"/>
        <field name="state">code</field>
        <field name="code">
def alert(m):
    raise(UserError(str(m)))

def routeWizard(sheet):
    wType = env.context['x_type'] or ""

    if wType == 'add_product':
        return {
            'view_type': 'form',
            'view_mode': 'form',
            'res_model': 'x_mjb_planning_wizard',
            'view_id': env.ref('x_mjb_planning_sheet.x_mjb_planning_wizard_form').id,
            'type': 'ir.actions.act_window',
            'target': 'new',
            'nodestroy': True,
            'context': {
                'default_x_sheet_id': sheet.id,
                'default_x_type': wType
            }
        }

    if wType == 'add_order':
        return {
            'view_type': 'form',
            'view_mode': 'form',
            'res_model': 'x_mjb_planning_wizard',
            'view_id': env.ref('x_mjb_planning_sheet.x_mjb_planning_wizard_form').id,
            'type': 'ir.actions.act_window',
            'target': 'new',
            'nodestroy': True,
            'context': {
                'default_x_sheet_id': sheet.id,
                'default_x_type': wType
            }
        }

    if wType == 'buy':
        lines = []
        for l in sheet.x_buy_line_ids:
            # if l.x_supplier_id:
            lines.append(l.id)
        return {
            'view_type': 'form',
            'view_mode': 'form',
            'res_model': 'x_mjb_planning_wizard',
            'view_id': env.ref('x_mjb_planning_sheet.x_mjb_planning_wizard_form').id,
            'type': 'ir.actions.act_window',
            'target': 'new',
            'nodestroy': True,
            'context': {
                'default_x_sheet_id': sheet.id,
                'default_x_type': wType,
                # 'default_x_need_line_ids': lines
            }
        }
    if wType == 'manufacture':
        lines = []
        for l in sheet.x_manufacture_line_ids:
            lines.append(l.id)
        # alert(lines)
        return {
            'view_type': 'form',
            'view_mode': 'form',
            'res_model': 'x_mjb_planning_wizard',
            'view_id': env.ref('x_mjb_planning_sheet.x_mjb_planning_wizard_form').id,
            'type': 'ir.actions.act_window',
            'target': 'new',
            'nodestroy': True,
            'context': {
                'default_x_sheet_id': sheet.id,
                'default_x_type': wType,
                'default_x_need_line_ids': lines
            }
        }
    if wType == 'subcontract':
        lines = []
        for l in sheet.x_subcontract_line_ids:
            # if l.x_supplier_id:
            lines.append(l.id)

        return {
            'view_type': 'form',
            'view_mode': 'form',
            'res_model': 'x_mjb_planning_wizard',
            'view_id': env.ref('x_mjb_planning_sheet.x_mjb_planning_wizard_form').id,
            'type': 'ir.actions.act_window',
            'target': 'new',
            'nodestroy': True,
            'context': {
                'default_x_sheet_id': sheet.id,
                'default_x_type': wType,
                'default_x_need_line_ids': lines
            }
        }

    alert("Nothing to do !")

if record:
    action = routeWizard(record)
        </field>
    </record>

    <record id="mrp_plan_production_orders" model="ir.actions.server">
        <field name="name">Mrp: Plan Production Orders</field>
        <field name="model_id" ref="mrp.model_mrp_production"/>
        <field name="binding_model_id" ref="mrp.model_mrp_production"/>
        <field name="state">code</field>
        <field name="code">
records.button_plan()
        </field>
    </record>

</odoo>
